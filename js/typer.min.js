//String.prototype.rightChars=function(t){return 0>=t?"":t>this.length?this:this.substring(this.length,this.length-t)},function(t){var r,n,e,o,i,a,p,s,u,h,g,l,c={highlightSpeed:20,typeSpeed:100,clearDelay:500,typeDelay:200,clearOnHighlight:!0,typerDataAttr:"data-typer-targets",typerInterval:2e3},d=0;o=function(r,n){return"rgba(0, 0, 0, 0)"===r&&(r="rgb(255, 255, 255)"),t("<span></span>").css("color",r).css("background-color",n)},s=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},p=function(t){t.removeData(["typePosition","highlightPosition","leftStop","rightStop","primaryColor","backgroundColor","text","typing"])},e=function(t){var r=t.data("text"),n=t.data("oldLeft"),o=t.data("oldRight");return r&&0!==r.length?(t.text(n+r.charAt(0)+o).data({oldLeft:n+r.charAt(0),text:r.substring(1)}),void setTimeout(function(){e(t)},g())):void p(t)},n=function(t){t.find("span").remove(),setTimeout(function(){e(t)},a())},r=function(t){var e,a,p,u=t.data("highlightPosition");return s(u)||(u=t.data("rightStop")+1),u<=t.data("leftStop")?void setTimeout(function(){n(t)},i()):(e=t.text().substring(0,u-1),a=t.text().substring(u-1,t.data("rightStop")+1),p=t.text().substring(t.data("rightStop")+1),t.html(e).append(o(t.data("backgroundColor"),t.data("primaryColor")).append(a)).append(p),t.data("highlightPosition",u-1),void setTimeout(function(){return r(t)},h()))},u=function(r){var n;if(!r.data("typing")){try{n=JSON.parse(r.attr(t.typer.options.typerDataAttr)).targets}catch(e){}"undefined"==typeof n&&(n=t.map(r.attr(t.typer.options.typerDataAttr).split(","),function(r){return t.trim(r)})),r.typeTo(n[d]),d<n.length?d++:d=0}},t.typer=function(){return{options:c}}(),t.extend(t.typer,{options:c}),t.fn.typer=function(){var r=t(this);return r.each(function(){var r=t(this);"undefined"!=typeof r.attr(t.typer.options.typerDataAttr)&&(u(r),setInterval(function(){u(r)},l()))})},t.fn.typeTo=function(n){var e=t(this),o=e.text(),i=0,a=0;if(o===n)return console.log("Our strings our equal, nothing to type"),e;if(o!==e.html())return console.error("Typer does not work on elements with child elements."),e;for(e.data("typing",!0);o.charAt(i)===n.charAt(i);)i++;for(;o.rightChars(a)===n.rightChars(a);)a++;return n=n.substring(i,n.length-a+1),e.data({oldLeft:o.substring(0,i),oldRight:o.rightChars(a-1),leftStop:i,rightStop:o.length-a,primaryColor:e.css("color"),backgroundColor:e.css("background-color"),text:n}),r(e),e},h=function(){return t.typer.options.highlightSpeed},g=function(){return t.typer.options.typeSpeed},i=function(){return t.typer.options.clearDelay},a=function(){return t.typer.options.typeDelay},l=function(){return t.typer.options.typerInterval}}(jQuery);

String.prototype.rightChars = function(n){
    if (n <= 0) {
        return "";
    }
    else if (n > this.length) {
        return this;
    }
    else {
        return this.substring(this.length, this.length - n);
    }
};

(function($) {
    var
        options = {
            highlightSpeed    : 20,
            typeSpeed         : 100,
            clearDelay        : 500,
            typeDelay         : 200,
            clearOnHighlight  : true,
            typerDataAttr     : 'data-typer-targets',
            typerInterval     : 2000
        },
        highlight,
        clearText,
        backspace,
        type,
        spanWithColor,
        clearDelay,
        typeDelay,
        clearData,
        isNumber,
        typeWithAttribute,
        getHighlightInterval,
        getTypeInterval,
        typerInterval;

    spanWithColor = function(color, backgroundColor) {
        if (color === 'rgba(0, 0, 0, 0)') {
            color = 'rgb(255, 255, 255)';
        }

        return $('<span></span>')
            .css('color', color)
            .css('background-color', backgroundColor);
    };

    isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    };

    clearData = function ($e) {
        $e.removeData([
            'typePosition',
            'highlightPosition',
            'leftStop',
            'rightStop',
            'primaryColor',
            'backgroundColor',
            'text',
            'typing'
        ]);
    };

    type = function ($e) {
        var
        // position = $e.data('typePosition'),
            text = $e.data('text'),
            oldLeft = $e.data('oldLeft'),
            oldRight = $e.data('oldRight');

        // if (!isNumber(position)) {
        // position = $e.data('leftStop');
        // }

        if (!text || text.length === 0) {
            clearData($e);
            return;
        }


        $e.text(
            oldLeft +
            text.charAt(0) +
            oldRight
        ).data({
                oldLeft: oldLeft + text.charAt(0),
                text: text.substring(1)
            });

        // $e.text($e.text() + text.substring(position, position + 1));

        // $e.data('typePosition', position + 1);

        setTimeout(function () {
            type($e);
        }, getTypeInterval());
    };

    clearText = function ($e) {
        $e.find('span').remove();

        setTimeout(function () {
            type($e);
        }, typeDelay());
    };

    highlight = function ($e) {
        var
            position = $e.data('highlightPosition'),
            leftText,
            highlightedText,
            rightText;

        if (!isNumber(position)) {
            position = $e.data('rightStop') + 1;
        }

        if (position <= $e.data('leftStop')) {
            setTimeout(function () {
                clearText($e);
            }, clearDelay());
            return;
        }

        leftText = $e.text().substring(0, position - 1);
        highlightedText = $e.text().substring(position - 1, $e.data('rightStop') + 1);
        rightText = $e.text().substring($e.data('rightStop') + 1);

        $e.html(leftText)
            .append(
            spanWithColor(
                $e.data('backgroundColor'),
                $e.data('primaryColor')
            )
                .append(highlightedText)
        )
            .append(rightText);

        $e.data('highlightPosition', position - 1);

        setTimeout(function () {
            return highlight($e);
        }, getHighlightInterval());
    };

    typeWithAttribute = function ($e) {
        var targets;

        if ($e.data('typing')) {
            return;
        }

        try {
            targets = JSON.parse($e.attr($.typer.options.typerDataAttr)).targets;
        } catch (e) {}

        if (typeof targets === "undefined") {
            targets = $.map($e.attr($.typer.options.typerDataAttr).split(','), function (e) {
                return $.trim(e);
            });
        }

        $e.typeTo(targets[Math.floor(Math.random()*targets.length)]);
    };

    // Expose our options to the world.
    $.typer = (function () {
        return { options: options };
    })();

    $.extend($.typer, {
        options: options
    });

    //-- Methods to attach to jQuery sets

    $.fn.typer = function() {
        var $elements = $(this);

        return $elements.each(function () {
            var $e = $(this);

            if (typeof $e.attr($.typer.options.typerDataAttr) === "undefined") {
                return;
            }

            typeWithAttribute($e);
            setInterval(function () {
                typeWithAttribute($e);
            }, typerInterval());
        });
    };

    $.fn.typeTo = function (newString) {
        var
            $e = $(this),
            currentText = $e.text(),
            i = 0,
            j = 0;

        if (currentText === newString) {
            console.log("Our strings our equal, nothing to type");
            return $e;
        }

        if (currentText !== $e.html()) {
            console.error("Typer does not work on elements with child elements.");
            return $e;
        }

        $e.data('typing', true);

        while (currentText.charAt(i) === newString.charAt(i)) {
            i++;
        }

        while (currentText.rightChars(j) === newString.rightChars(j)) {
            j++;
        }

        newString = newString.substring(i, newString.length - j + 1);

        $e.data({
            oldLeft: currentText.substring(0, i),
            oldRight: currentText.rightChars(j - 1),
            leftStop: i,
            rightStop: currentText.length - j,
            primaryColor: $e.css('color'),
            backgroundColor: $e.css('background-color'),
            text: newString
        });

        highlight($e);

        return $e;
    };

    //-- Helper methods. These can one day be customized further to include things like ranges of delays.

    getHighlightInterval = function () {
        return $.typer.options.highlightSpeed;
    };

    getTypeInterval = function () {
        return $.typer.options.typeSpeed;
    },

        clearDelay = function () {
            return $.typer.options.clearDelay;
        },

        typeDelay = function () {
            return $.typer.options.typeDelay;
        };

    typerInterval = function () {
        return $.typer.options.typerInterval;
    };
})(jQuery);